import pip
import pymorphy2
import pymorphy2 as pymorphy2
from dawg_python import DAWG
from pip._vendor.msgpack.fallback import xrange

morph=[
u'ВЫСОКИЙ',
u'ВЫСОКОГО',
u'ВЫСОКОМУ',
u'ВЫСОКОГО',
u'ВЫСОКИЙ',
u'ВЫСОКИМ',
u'ВЫСОКОМ',
u'ВЫСОКАЯ',
u'ВЫСОКОЙ',
u'ВЫСОКОЙ',
u'ВЫСОКУЮ',
u'ВЫСОКОЙ',
u'ВЫСОКОЮ',
u'ВЫСОКОЙ',
u'ВЫСОКОЕ',
u'ВЫСОКОГО',
u'ВЫСОКОМУ',
u'ВЫСОКОЕ',
u'ВЫСОКИМ',
u'ВЫСОКОМ',
u'ВЫСОКИЕ',
u'ВЫСОКИХ',
u'ВЫСОКИМ',
u'ВЫСОКИХ',
u'ВЫСОКИЕ',
u'ВЫСОКИМИ',
u'ВЫСОКИХ',
u'ВЫСОК',
u'ВЫСОКА',
u'ВЫСОКО',
u'ВЫСОКО',
u'ВЫСОКИ',
u'ВЫСОКИ',
u'ВЫШЕ',
u'ПОВЫШЕ',
u'ВЫСОЧАЙШИЙ',
u'НАИВЫСОЧАЙШИЙ',
u'ВЫСШИЙ',
u'НАИВЫСШИЙ',
u'ВЫСОЧАЙШЕГО',
u'НАИВЫСОЧАЙШЕГО',
u'ВЫСШЕГО',
u'НАИВЫСШЕГО',
u'ВЫСОЧАЙШЕМУ',
u'НАИВЫСОЧАЙШЕМУ',
u'ВЫСШЕМУ',
u'НАИВЫСШЕМУ',
u'ВЫСОЧАЙШЕГО',
u'НАИВЫСОЧАЙШЕГО',
u'ВЫСШЕГО',
u'НАИВЫСШЕГО',
u'ВЫСОЧАЙШИЙ',
u'НАИВЫСОЧАЙШИЙ',
u'ВЫСШИЙ',
u'НАИВЫСШИЙ',
u'ВЫСОЧАЙШИМ',
u'НАИВЫСОЧАЙШИМ',
u'ВЫСШИМ',
u'НАИВЫСШИМ',
u'ВЫСОЧАЙШЕМ',
u'НАИВЫСОЧАЙШЕМ',
u'ВЫСШЕМ',
u'НАИВЫСШЕМ',
u'ВЫСОЧАЙШАЯ',
u'НАИВЫСОЧАЙШАЯ',
u'ВЫСШАЯ',
u'НАИВЫСШАЯ',
u'ВЫСОЧАЙШЕЙ',
u'НАИВЫСОЧАЙШЕЙ',
u'ВЫСШЕЙ',
u'НАИВЫСШЕЙ',
u'ВЫСОЧАЙШЕЙ',
u'НАИВЫСОЧАЙШЕЙ',
u'ВЫСШЕЙ',
u'НАИВЫСШЕЙ',
u'ВЫСОЧАЙШУЮ',
u'НАИВЫСОЧАЙШУЮ',
u'ВЫСШУЮ',
u'НАИВЫСШУЮ',
u'ВЫСОЧАЙШЕЙ',
u'НАИВЫСОЧАЙШЕЙ',
u'ВЫСОЧАЙШЕЮ',
u'НАИВЫСОЧАЙШЕЮ',
u'ВЫСШЕЙ',
u'НАИВЫСШЕЙ',
u'ВЫСШЕЮ',
u'НАИВЫСШЕЮ',
u'ВЫСОЧАЙШЕЙ',
u'НАИВЫСОЧАЙШЕЙ',
u'ВЫСШЕЙ',
u'НАИВЫСШЕЙ',
u'ВЫСОЧАЙШЕЕ',
u'НАИВЫСОЧАЙШЕЕ',
u'ВЫСШЕЕ',
u'НАИВЫСШЕЕ',
u'ВЫСОЧАЙШЕГО',
u'НАИВЫСОЧАЙШЕГО',
u'ВЫСШЕГО',
u'НАИВЫСШЕГО',
u'ВЫСОЧАЙШЕМУ',
u'НАИВЫСОЧАЙШЕМУ',
u'ВЫСШЕМУ',
u'НАИВЫСШЕМУ',
u'ВЫСОЧАЙШЕЕ',
u'НАИВЫСОЧАЙШЕЕ',
u'ВЫСШЕЕ',
u'НАИВЫСШЕЕ',
u'ВЫСОЧАЙШИМ',
u'НАИВЫСОЧАЙШИМ',
u'ВЫСШИМ',
u'НАИВЫСШИМ',
u'ВЫСОЧАЙШЕМ',
u'НАИВЫСОЧАЙШЕМ',
u'ВЫСШЕМ',
u'НАИВЫСШЕМ',
u'ВЫСОЧАЙШИЕ',
u'НАИВЫСОЧАЙШИЕ',
u'ВЫСШИЕ',
u'НАИВЫСШИЕ',
u'ВЫСОЧАЙШИХ',
u'НАИВЫСОЧАЙШИХ',
u'ВЫСШИХ',
u'НАИВЫСШИХ',
u'ВЫСОЧАЙШИМ',
u'НАИВЫСОЧАЙШИМ',
u'ВЫСШИМ',
u'НАИВЫСШИМ',
u'ВЫСОЧАЙШИХ',
u'НАИВЫСОЧАЙШИХ',
u'ВЫСШИХ',
u'НАИВЫСШИХ',
u'ВЫСОЧАЙШИЕ',
u'НАИВЫСОЧАЙШИЕ',
u'ВЫСШИЕ',
u'НАИВЫСШИЕ',
u'ВЫСОЧАЙШИМИ',
u'НАИВЫСОЧАЙШИМИ',
u'ВЫСШИМИ',
u'НАИВЫСШИМИ',
u'ВЫСОЧАЙШИХ',
u'НАИВЫСОЧАЙШИХ',
u'ВЫСШИХ',
u'НАИВЫСШИХ',
]
def lcs(S1, S2):
    M = [[0] * (1 + len(S2)) for i in xrange(1 + len(S1))]
    longest, x_longest = 0, 0
    for x in xrange(1, 1 + len(S1)):
        for y in xrange(1, 1 + len(S2)):
            if S1[x - 1] == S2[y - 1]:
                M[x][y] = M[x - 1][y - 1] + 1
                if M[x][y] > longest:
                    longest = M[x][y]
                    x_longest = x
            else:
                M[x][y] = 0
    return S1[x_longest - longest: x_longest]


if __name__ == '__main__':


    lcses = []
    min_length = 3
    for i in xrange(len(morph)):
        common = lcs(morph[0], morph[i])
        if len(common) >= min_length:
            lcses.append((common, len(common)))

    lcses = sorted(lcses, key=lambda x: x[1])

    print (lcses[0][0])
